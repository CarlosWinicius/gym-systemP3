name: CI/CD Pipeline

on:
  push:
    branches: [ "develop","ci-test" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Build, Test and Package with Maven
        run: mvn -B verify --file pom.xml
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/*.jar
  
  analyze:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Cache Sonar
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/
      
      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.organization=$SONAR_ORGANIZATION \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN
            -Dsonar.scanAllFiles=true
  
  tag_and_release:
    name: Create Tag and Release
    runs-on: ubuntu-latest
    needs: analyze
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          release_branches: 'ci-test'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: "patch"
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:

          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: Release autom√°tica gerada pela pipeline de CI/CD.
          files: '*.jar'

name: CI/CD pipeline

on:
  push:
    branches: [ "develop", "ci-test" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Build, Test and Package with Maven
        run: mvn -B verify --file pom.xml
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/*.jar
  
  
  analyze:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Cache Sonar
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Run SonarQube Analysis
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify sonar:sonar \
          -Dsonar.projectKey=carloswinicius_gym-systemp3 \
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
          -Dsonar.login=${{ env.SONAR_TOKEN }}
  
  
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: analyze
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./release/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Release autom√°tica gerada pela pipeline de CI/CD.
          files: ./release/*.jar

